name: Pull Request

on: 
  push:
    branches: [main]
  
  pull_request:
    branches:
  
env:
  TRIGGERS: ('frontend/' 'backend/' 'database/' '.github/workflows')

jobs:
  check:
    name: Check
    outputs:
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/main

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Build and deploy workflows not triggered"

  build-backend:
    name: Build-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Compiling the Backend application and creating docker container
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: false 
          tags: backend:latest

  build-frontend:
    name: Build-Frontend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: false
          tags: frontend:latest

  build-database:
    name: Build-Database
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push Database Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./database/
          push: false
          tags: database:latest

  tests-frontend:
    name: Tests-Frontend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd frontend
          npm ci
          npm test

  tests-backend:
    name: Tests-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd backend
          npm ci
          npm test

  linting:
    name: Linting-Code
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v24
      
      - name: Tests
        run: |
          cd backend
          npm install eslint --save-dev
          npm ci
          npm run lint
         



  trivy-repo:
    name: Trivy-Repo
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.2.3
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"
